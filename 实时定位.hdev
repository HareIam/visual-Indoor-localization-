<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0">
<procedure name="main">
<interface/>
<body>
<c>********************</c>
<c>*File name:实时定位  </c>
<c>*Author: xushihao      Date:5.20 </c>
<c>*Explanation:   实时经行双目测距的室内定位，并在地图上显示定位结果</c>
<c>********************</c>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1"></c>
<c>*摄像机内外参数</c>
<l>CamParamL :=[0.00499305, -5421.31, 3.74703e-006, 3.75e-006, 646.293, 501.872, 1292, 964]</l>
<l>CamParamR :=[0.00495446, -5286.24, 3.74123e-006, 3.75e-006, 640.95, 479.055, 1292, 964]</l>
<l>RelPose :=[0.179571, 0.00388683, -0.00501369, 359.469, 0.0527082, 0.291063, 0]</l>
<l>CamParVirtualFixedL := CamParamL</l>
<l>CamParVirtualFixedL[1] := 0</l>
<l>CamParVirtualFixedR := CamParamR</l>
<l>CamParVirtualFixedR[1] := 0</l>
<c></c>
<c>*新建窗口</c>
<l>dev_open_window(0, 0, 1292/2, 964/2, 'black', WindowHandle1)</l>
<l>dev_open_window(0, 0, 1292/2, 964/2, 'black', WindowHandle2)</l>
<l>dev_open_window(0, 0, 1800, 775, 'black', WindowHandle3)</l>
<c>*创建矫正窗口</c>
<l>gen_binocular_rectification_map (MapL, MapR, CamParamL, CamParamR, RelPose, 1, 'geometric', 'nearest_neighbor', RectCamParL, RectCamParR, CamPoseRectL, CamPoseRectR, RectLPosRectR)</l>
<c></c>
<l>gen_radial_distortion_map (MapFixedL, CamParamL, CamParVirtualFixedL, 'bilinear')</l>
<l>gen_radial_distortion_map (MapFixedR, CamParamR, CamParVirtualFixedR, 'bilinear')</l>
<c></c>
<c>*开摄像头</c>
<c>******彩色的哦******************</c>
<l>open_framegrabber ('GenICamTL', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '&lt;VENDOR&gt;Daheng Imavision&lt;/VENDOR&gt;&lt;MODEL&gt;MER-125-30UC&lt;/MODEL&gt;&lt;TYPE&gt;74&lt;/TYPE&gt;&lt;SN&gt;RW0149007014&lt;/SN&gt;&lt;DISPLAY&gt;MER-125-30UC(RW0149007014)&lt;/DISPLAY&gt;', 0, -1, AcqHandle1)</l>
<l>set_framegrabber_param (AcqHandle1, 'BalanceWhiteAuto', 'Continuous')</l>
<l>open_framegrabber ('GenICamTL', 0, 0, 0, 0, 0, 0, 'progressive', -1, 'default', -1, 'false', 'default', '&lt;VENDOR&gt;Daheng Imavision&lt;/VENDOR&gt;&lt;MODEL&gt;MER-125-30UC&lt;/MODEL&gt;&lt;TYPE&gt;74&lt;/TYPE&gt;&lt;SN&gt;RW0150007014&lt;/SN&gt;&lt;DISPLAY&gt;MER-125-30UC(RW0150007014)&lt;/DISPLAY&gt;', 0, -1, AcqHandle2)</l>
<l>set_framegrabber_param (AcqHandle2, 'BalanceWhiteAuto', 'Continuous')</l>
<l>set_framegrabber_param (AcqHandle1, 'Gain', 750.0)</l>
<l>set_framegrabber_param (AcqHandle2, 'Gain', 750.0)</l>
<l>grab_image_start (AcqHandle1, -1)</l>
<l>grab_image_start (AcqHandle2, -1)</l>
<c>********************************</c>
<l>dev_update_window ('off')</l>
<l>Index1:=0</l>
<l>Index:=0</l>
<l>stop()</l>
<l>read_image (Image_map,'C:/Users/xushi/Desktop/MV_program/Final/map/map2.jpg')</l>
<l>get_image_size (Image_map, Width, Height)</l>
<l>dev_set_draw ('margin')</l>
<l>dev_display (Image_map)</l>
<c>* </c>
<c>* 初始化参数</c>
<c>*世界坐标系坐标</c>
<c>*********海报************</c>
<l>length_seal:=[1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0]</l>
<l>X_1:=[0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,1.51,1.51,1.51,1.51,1.51,1.51,0.31,0.31,0.31]</l>
<l>X_2:=[0.01,0.01,0.01,0.05,0.05,0.05,0.01,0.01,0.01,0.53,0.53,0.53,0.53,0.53,0.53,0.31,0.31,0.31]</l>
<l>Y_1:=[8.15,8.15,8.15,5.1,5.1,5.1,8.15,8.15,8.15,-0.2,-0.2,-0.2,0.02,0.02,0.02,10.76,10.76,10.76]</l>
<l>Y_2:=[9.12,9.12,9.12,6.2,6.2,6.2,9.12,9.12,9.12,-0.2,-0.2,-0.2,0.02,0.02,0.02,11.77,11.77,11.77]</l>
<l>Z_1:=[2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19,2.19]</l>
<l>Z_2:=[2.18,2.19,2.19,2.19,2.19,2.19,2.18,2.19,2.19,2.19,2.19,2.19,2.18,2.19,2.19,2.19,2.19,2.19]</l>
<l>location_seal:=[4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,4,4,4]</l>
<c>*************************</c>
<c>*世界坐标原点在图像中的位置</c>
<l>Zero_Point:=[350,509]</l>
<c>*真是距离和像素大小之间的比值</c>
<l>Ratio_map:=728.5/32.6</l>
<c>*定位的相对原点坐标为xreal和yreal</c>
<l>ModelIDs := []</l>
<l>ModelsFound := 0</l>
<l>NumPoints := []</l>
<l>NumModels := 18</l>
<l>TotalTime := 0</l>
<l>Need_1:=true</l>
<l>X:=[0,0,0,0]</l>
<l>Y:=[0,0,0,0]</l>
<l>Z:=[0,0,0,0]</l>
<l>X_real:=0</l>
<l>Y_real:=0</l>
<l>Z_real:=0</l>
<l>N1_tx:=0</l>
<l>Address_write_X:=[]</l>
<l>Address_write_Y:=[]</l>
<l> Message := 'X1='+ X[0]+ ' X2='+X[1]</l>
<l> Message[1] := 'Y1=' + Y[0] + ' Y2='+Y[1]</l>
<l> Message[2] := 'Z1=' + Z[0] + ' Z2='+Z[1]</l>
<l> Message_real := 'X='+ X_real</l>
<l>Message_real[1] := 'Y=' + Y_real</l>
<l>Message_real[2] := 'Z=' + Z_real</l>
<l>Widths:=[]</l>
<l>Heights:=[]</l>
<l>p:=0</l>
<l>gen_rectangle1 (Rectangle, 10, 10, Height - 10, Width - 10)</l>
<l>RowRoi := [68.9338,68.9338,898.91,898.91]</l>
<l>ColRoi := [10.805, 1273.73,1273.73,68.9338]</l>
<c>*获取模板矩形框</c>
<l>*gen_rectangle1 (Rectangle, 68.9338, 10.805, 898.91, 1273.73)</l>
<l>*gen_rectangle1 (Rectangle, 72.1633, 307.965, 953.812, 921.665)</l>
<l>stop ()</l>
<l>dev_set_window(WindowHandle1)</l>
<c>* </c>
<c>* 读取每个模板</c>
<l>if (Need_1 ==true)</l>
<l>for Index := 1 to NumModels by 1</l>
<l>    read_image (Image_tamplate,'C:/Users/xushi/Desktop/MV_program/Final/template/'+Index+'.jpg')</l>
<l>    get_image_size (Image_tamplate, Width_tamplate, Height_tamplate)</l>
<l>    read_descriptor_model('seal525_'+Index+'.dsm',ModelID)</l>
<c></c>
<c>    * For the correct projection of the rectangles in a later step the origin</c>
<c>    *   of the model has to be set to the image origin</c>
<l>    set_descriptor_model_origin (ModelID, -Height_tamplate / 2, -Width_tamplate / 2)</l>
<l>    ModelIDs := [ModelIDs,ModelID]</l>
<c>    * </c>
<c>    * Store the points which are extracted from the model for later matching.</c>
<l>    get_descriptor_model_points (ModelID, 'model', 'all', Row_D, Col_D)</l>
<l>    NumPoints := [NumPoints,|Row_D|]</l>
<l>    gen_cross_contour_xld (Cross, Row_D, Col_D, 6, 0.785398)</l>
<c></c>
<l>endfor</l>
<c>****************读图像大小******************</c>
<l>for K := 1 to NumModels by 1</l>
<l>read_image (Image,'C:/Users/xushi/Desktop/MV_program/Final/template/'+K+'.jpg')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>Widths:=[Widths,Width]</l>
<l>Heights:=[Heights,Height]</l>
<l>endfor</l>
<c>*********************************************</c>
<l>stop ()</l>
<c>* Model creation finished.</c>
<l>endif</l>
<c>*循环读取图片</c>
<l>count_seconds(seconds11)</l>
<l>while(true)</l>
<c></c>
<l>   grab_image_async(ImageL, AcqHandle2, -1)</l>
<l>    disp_color(ImageL, WindowHandle2)     </l>
<l>    grab_image_async(ImageR, AcqHandle1, -1)</l>
<l>    disp_color(ImageR, WindowHandle1)   </l>
<l>    disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    disp_message (WindowHandle1, Message_real, 'window', 12, 500, 'black', 'true')</l>
<c></c>
<c>* Main loop:</c>
<c>*读取摄像机采集到的图片</c>
<c>*初始参数设置</c>
<l>    numPictureL:=1</l>
<l>    numPicture:=0</l>
<l>    Index2:=0</l>
<l>    Address_real:=[]</l>
<l>    Row_Left:=[]</l>
<l>    Col_Left:=[]</l>
<l>     dev_set_window (WindowHandle2) </l>
<l>     Models_ready:=0</l>
<l>     ModelsFound:=0</l>
<l>    rgb1_to_gray (ImageL, ImageL)</l>
<c>*搜寻每个模板</c>
<c>         </c>
<l>    for Index2 := 1 to |ModelIDs|  by 1</l>
<l>      if(ModelsFound==0)  </l>
<l>        find_uncalib_descriptor_model (ImageL, ModelIDs[Index2-1], 'threshold', 500, ['min_score_descr','guided_matching'], [0,'on'], 0.1, 1, 'num_points', HomMat2D, Score)</l>
<l>        numPicture:=numPicture+1</l>
<c>        * Check if the found instance is to be considered as a possible right match</c>
<c>        * depending on the number of points which were considered</c>
<l>        if ((|HomMat2D| &gt; 0) and (Score &gt; NumPoints[Index2-1] / 10))</l>
<l>           RowRoi := [10,10,Heights[Index2-1] - 10,Heights[Index2-1] - 10]</l>
<l>           ColRoi := [10,Widths[Index2-1] - 10,Widths[Index2-1] - 10,10]</l>
<l>           gen_rectangle1 (Rectangle, 10, 10, Heights[Index2-1] - 10, Widths[Index2-1] - 10)</l>
<c>            *    </c>
<c>            * Project the ROI rectangle and points</c>
<l>            projective_trans_region (Rectangle, TransRegion, HomMat2D, 'bilinear')</l>
<l>            projective_trans_pixel (HomMat2D, RowRoi, ColRoi, RowTrans, ColTrans)</l>
<l>            Row_Left:=RowTrans</l>
<l>            Col_Left:=ColTrans</l>
<l>            angle_ll (RowTrans[2], ColTrans[2], RowTrans[1], ColTrans[1], RowTrans[1], ColTrans[1], RowTrans[0], ColTrans[0], Angle)</l>
<l>            Angle := deg(Angle)</l>
<c>            * Check if the projected rectangle is to be considered as a right match</c>
<c>            * depending on the angle in the right upper edge.</c>
<l>            if (Angle &gt; 60 and Angle &lt; 120)</l>
<l>                ModelsFound:=1</l>
<l>                area_center (TransRegion, Area, Row_Area_L, Column_Area_L)</l>
<l>                Models_ready:=Models_ready + 1</l>
<l>                 dev_set_window (WindowHandle2) </l>
<l>                dev_set_color ('green')</l>
<l>                dev_set_line_width (4)</l>
<l>                dev_display (TransRegion)</l>
<l>            endif</l>
<l>        endif</l>
<l>      endif</l>
<l>    endfor</l>
<l>    ModelsFound:=0</l>
<l>    Col_Right:=[]</l>
<l>    rgb1_to_gray (ImageR, ImageR)</l>
<c>*搜寻每个模板</c>
<l>    OneOfPicture:=2-(numPicture-1)%3</l>
<l>    for Index2 := numPicture to numPicture+OneOfPicture  by 1</l>
<l>        if(ModelsFound==0)    </l>
<l>        find_uncalib_descriptor_model (ImageR, ModelIDs[Index2-1], 'threshold', 800, ['min_score_descr','guided_matching'], [0,'on'], 0.01, 1, 'num_points', HomMat2D, Score)</l>
<c>        * </c>
<c>        * Check if the found instance is to be considered as a possible right match</c>
<c>        * depending on the number of points which were considered</c>
<l>        if ((|HomMat2D| &gt; 0) and (Score &gt; NumPoints[Index2-1] / 10))</l>
<l>           RowRoi := [10,10,Heights[Index2-1] - 10,Heights[Index2-1] - 10]</l>
<l>           ColRoi := [10,Widths[Index2-1] - 10,Widths[Index2-1] - 10,10]</l>
<l>           gen_rectangle1 (Rectangle, 10, 10, Heights[Index2-1] - 10, Widths[Index2-1]  - 10)</l>
<l>*            get_descriptor_model_points (ModelIDs[Index2], 'search', 0, Row, Col)</l>
<l>*            gen_cross_contour_xld (Cross, Row, Col, 6, 0.785398)</l>
<c>            * </c>
<c>            * Project the ROI rectangle and points</c>
<l>            projective_trans_region (Rectangle, TransRegion, HomMat2D, 'bilinear')</l>
<l>            projective_trans_pixel (HomMat2D, RowRoi, ColRoi, RowTrans, ColTrans)</l>
<l>            Col_Right:=ColTrans</l>
<l>            angle_ll (RowTrans[2], ColTrans[2], RowTrans[1], ColTrans[1], RowTrans[1], ColTrans[1], RowTrans[0], ColTrans[0], Angle)</l>
<l>            Angle := deg(Angle)</l>
<c>            * </c>
<c>            * Check if the projected rectangle is to be considered as a right match</c>
<c>            * depending on the angle in the right upper edge.</c>
<l>            if (Angle &gt; 70 and Angle &lt; 120)</l>
<l>                area_center (TransRegion, Area, Row_Area_R, Column_Area_R)</l>
<l>                ModelsFound:=1</l>
<l>                dev_set_window (WindowHandle1) </l>
<l>                Models_ready:=Models_ready+1</l>
<l>                dev_set_color ('green')</l>
<l>                dev_set_line_width (4)                </l>
<l>                dev_display (TransRegion)</l>
<l>            endif</l>
<l>        endif</l>
<l>       endif</l>
<l>    endfor</l>
<l>if(Models_ready==2)</l>
<c></c>
<l>      try</l>
<l>        disparity:=Col_Left-Col_Right</l>
<c>        </c>
<c>        *****微调******</c>
<l>         disparity:=-(disparity)</l>
<l>         disparity[1]:=disparity[1]+2</l>
<c>        ****************</c>
<l>        disparity_to_point_3d (RectCamParL, RectCamParR,  RectLPosRectR, Row_Left, Col_Left,disparity, Y, Z, X)</l>
<l>        X:=X</l>
<l>        Z:=Z</l>
<l>        Y:=-Y</l>
<l>        Message := 'X1='+ X[0]+ ' X2='+X[1]</l>
<l>        Message[1] := 'Y1=' + Y[0] + ' Y2='+Y[1]</l>
<l>        Message[2] := 'Z1=' + Z[0] + ' Z2='+Z[1]</l>
<l>        disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<c>        </c>
<c>*坐标系变换</c>
<c>   </c>
<c>*摄像机坐标系下的角度和坐标</c>
<l>numPicture:=numPicture-1</l>
<c></c>
<l>Xc1:=[X[0],Y[0],Z[0]]</l>
<l>Xc2:=[X[1],Y[1],Z[1]]</l>
<c>***********方法二***************</c>
<l>D_1:=sqrt(Xc1[0]*Xc1[0]+Xc1[1]*Xc1[1])</l>
<l>D_2:=sqrt(Xc2[0]*Xc2[0]+Xc2[1]*Xc2[1])</l>
<l>D_3:=abs((X[0]-X[1])*(X[0]-X[1])+(Y[0]-Y[1])*(Y[0]-Y[1]))</l>
<l>* D_3:=abs(Xc1[1]-Xc2[1])</l>
<l>theta:=acos((D_2*D_2+D_3*D_3-D_1*D_1)/(2*D_2*D_3))</l>
<l>XCoordinate:= D_2*cos(theta)</l>
<l>YCoordinate:= D_2*sin(theta)</l>
<c>**********计算在地图上的坐标***********************************</c>
<l>if(location_seal[numPicture]==1)</l>
<l>    Address_real[0]:=[X_2[numPicture]+XCoordinate]</l>
<l>    Address_real[1]:=-[Y_2[numPicture]+YCoordinate]</l>
<l>elseif(location_seal[numPicture]==2)</l>
<l>    Address_real[0]:=[X_2[numPicture]-XCoordinate]</l>
<l>    Address_real[1]:=-[Y_2[numPicture]-YCoordinate]</l>
<l>elseif(location_seal[numPicture]==3)</l>
<l>    Address_real[0]:=[X_2[numPicture]-YCoordinate]</l>
<l>    Address_real[1]:=-[Y_2[numPicture]+XCoordinate]</l>
<l>elseif(location_seal[numPicture]==4)</l>
<l>    Address_real[0]:=[X_2[numPicture]+YCoordinate]</l>
<l>    Address_real[1]:=-[Y_2[numPicture]-XCoordinate]</l>
<l>endif</l>
<c>***********储存计算值******************************************</c>
<l>Address_write_X:=[Address_write_X,Address_real[0]]</l>
<l>Address_write_Y:=[Address_write_Y,Address_real[1]]</l>
<c>***********在地图中显示坐标点**********************************</c>
<c></c>
<l>Address_Point:=(Address_real*Ratio_map+Zero_Point)</l>
<c></c>
<l>*disp_color(Image_map, WindowHandle3)</l>
<l>disp_cross(WindowHandle3,Address_Point[1], Address_Point[0], 20, 1.5)</l>
<c></c>
<c>***********************************</c>
<l>Message_real:='X='+Address_real[0]</l>
<l>Message_real[1] := 'Y=' +Address_real[1]</l>
<l>Message_real[2] := '@=' + theta*180/3.1415926</l>
<c></c>
<l>disp_message (WindowHandle3, Message_real, 'window', 12, 750, 'black', 'true')</l>
<l>catch(Excption)</l>
<l>endtry</l>
<l>    else</l>
<l>        Message := 'X1='+ X[0]+ ' X2='+X[1]</l>
<l>        Message[1] := 'Y1=' + Y[0] + ' Y2='+Y[1]</l>
<l>        Message[2] := 'Z1=' + Z[0] + ' Z2='+Z[1]</l>
<l>        disp_message (WindowHandle1, Message, 'window', 12, 12, 'black', 'true')</l>
<l>    endif</l>
<l>count_seconds (Seconds22)</l>
<l>all_time:=Seconds22-seconds11</l>
<l>endwhile</l>
<c></c>
<l>stop ()</l>
<l>for Index := 0 to |ModelIDs| - 1 by 1</l>
<l>    clear_descriptor_model (ModelIDs[Index])</l>
<l>endfor</l>
<l>close_framegrabber (AcqHandle2)</l>
<c as_id="image_acquisition" as_name="Image Acquisition 01" as_grp="[1,1]" as_ord="1"></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
